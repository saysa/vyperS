<?php

namespace Vyper\SiteBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function myFindAll()
    {
        $queryBuilder = $this->createQueryBuilder('a');
        $queryBuilder->where('a.deleted = false');
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();

        return $results;
    }

    public function carousel()
    {
        $queryBuilder = $this->createQueryBuilder('a');
        $queryBuilder
            ->where('a.deleted = false')
            ->andWhere('a.highlight = true')
            ->orderBy('a.releaseDate', 'DESC')
            ->setMaxResults(8)
        ;

        $query = $queryBuilder->getQuery();
        $results = $query->getResult();

        return $results;
    }

    public function showRecentArticles($limit = 10)
    {
        $queryBuilder = $this->createQueryBuilder('a');
        $queryBuilder->where('a.deleted = false')->setMaxResults($limit);
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();

        return $results;
    }

    public function latestNews($type)
    {
        $queryBuilder = $this->createQueryBuilder('a');
        $queryBuilder
            ->where('a.deleted = false')
            ->andWhere('a.articleType = :type')
            ->orderBy('a.created', 'DESC')
            ->setMaxResults(5)
            ->setParameter('type', $type)
        ;
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();

        return $results;
    }


    public function showAll($posts_per_page, $page)
    {
        if ($page < 1) {
            throw new \InvalidArgumentException('Can not be < 1');
        }

        $queryBuilder = $this->createQueryBuilder('a');
        $queryBuilder->where('a.deleted = false');
        $query = $queryBuilder->getQuery();


        $query
            ->setFirstResult(($page-1) * $posts_per_page)
            ->setMaxResults($posts_per_page)
        ;

        return new Paginator($query);
    }
}
